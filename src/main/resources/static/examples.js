var examples = {
    'hello': '<samosa>\n\n(\"Hello!\") -> putout.\n\n</samosa>',
    'variables': '<samosa>\n\nbro, i: int = 0.\nbro, str: string = "hello!".\nbro, aBoolVal: boolie = true.\n\n/* Variables can also just be declared. */\nbro, j: int.\nbro, str2: string.\nbro, boolieVal: boolie.\n\n/* Types will be inferred for these: */\nbro, iInferred = 0.\nbro, strInferred = "string".\nbro, aBoolValInferred = true.\n\n</samosa>',
    'user-inp': "<samosa>\n\n/* Take input of the required type from the user: */\nbro, i: int = () -> putinInt.\nbro, str: string = () -> putinString.\nbro, boolVal: boolie = () -> putinBoolie. \n\n/* for putinBoolie, input can be given as TRUE or true for a true value\n   and false or FALSE for a false value */\n\n/* () -> putinInt etc. are function calls, that can in general be\n   used in expressions. */\n\n</samosa>",
    'user-out': '<samosa>\n\n/* Displaying values */\n\n/* You can pass any type to putout. */\n("Hello") -> putout.\n(5) -> putout.\n(true) -> putout.\n\n</samosa>',
    'expressions': '<samosa>\n\n/* String concatenation: */\nbro, str = "string" + "literal".\n\n/* An integer value will be stored in anIntVal. */\nbro, anIntVal = 3 + 4 / 4.\n\n/* Boolean expressions: */\nbro, aBoolVal = true or false.\nbro, anotherBoolVal = anIntVal > 10.\nbro, someBoolVal = anIntVal == 10 and anotherBoolVal.\nbro, boolval = anIntVal != 100.\n\n</samosa>',
    'conditions': '<samosa>\nbro, i = 9.\n\nif (i == 9) {\n    ("i is 9") -> putout.\n}\nelse if (i == 10) {\n    ("i is 10") -> putout.\n}\nelse if (i == 11) {\n    ("i is 11") -> putout.\n}\nelse {\n    ("I dunno, I just like samosa.") -> putout.\n}\n\n</samosa>',
    'while': '<samosa>\nbro, i: int = 3.\n\nwhile (i > 0) {\n    (i) -> putout.\n    bro, j: int = () -> putinInt.\n    \n    if (j == 9) {\n        yamete_kudasai.\n    }\n}\n</samosa>',
    'functions': '<samosa>\n\n/* Defining functions */\n\n/* Specifying void is not necessary below: */\nlet function1(): void {\n    ("Hello from function1!") -> putout.\n}\n\n/* This function takes an int as an argument and returns an int */\nlet function2(var1: int): int {\n    return var1 + 3.\n}\n\n/* This function returns void (nothing) */\nlet function3(var1: int, name: string) {\n    ("Hello " + name + " from function3!") -> putout.\n    (var1) -> putout.\n}\n\n/* Calling functions */\n/* Note that a function must be defined before it is called. */\n\n() -> function1.\n(10, "human") -> function3.\n\nbro, m = 7.\nbro, i: int = 3 + (5 + m) -> function2.\n\n</samosa>',
    'builtins': '<samosa>\r\n\r\n/* Convert string to integer. */\r\nbro, i: int = ("5") -> stoi.\r\n\r\n/* Convert integer to a string. */\r\nbro, str: string = (5) -> itos.\r\n\r\n/* You can do something like this: */\r\n("Hello! This is the number " + (10) -> itos) -> putout.\r\n\r\n/* And something like this: */\r\nbro, i2: int = (() -> putinString) -> stoi.\r\n\r\n</samosa>',
    'simple-probable': '<samosa>\r\n\r\n/* Simple probable statements: */\r\n\r\nbro, prob: int = () -> putinInt.\r\n(prob) -> putout. ?[prob + 5]...\r\n\r\n("The chance of this being shown is 35%.") -> putout. ?[35]...\r\n\r\n/* Simple probable statements with alternatives: */\r\n\r\n("This line is printed 25% of the time.") -> putout. ?[25] \r\n    ("And this line is printed the rest of the time.") -> putout.\r\n\r\n</samosa>',
    'nested-probable': '<samosa>\r\n\r\n/* Nested probable statements. */\r\n\r\n/* Single statement, nested/multiple probabilities: */\r\n("Hello world!") -> putout.   ?[40]... ?[80]...\r\n\r\n\r\n/* Multiple statements, nested probabilities: */\r\n("nested3a") -> putout. ?[55] ("nested3b") -> putout. ?[70]\r\n    ("nested2b") -> putout. ?[60]\r\n         ("nested1b") -> putout.\r\n\r\n/* Note that Variable declarations, function definitions, \r\n   and return statements cannot be probable statements. */\r\n\r\n/* You can mix simple probable statements and simple \r\n   probable statements with alternatives while nesting, but this\r\n   is currently an untested feature. */\r\n\r\n/* Like this: */\r\n/* ("Bye world!") -> putout.   ?[40]... \r\n        ?[80] ("Goodbye world!") -> putout. */\r\n\r\n/* As this is an untested feature, it will not run in the playground. */\r\n\r\n</samosa>\r\n'
}